plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

loom {
    accessWidenerPath = file("../../src/main/resources/shared-resources.accesswidener")

    runConfigs.client {
        ideConfigGenerated(true)
        vmArgs("-Dmixin.debug.export=true")
        runDir = "../../run"
    }
}

// stuff that applies to all projects
tasks.withType(JavaCompile).configureEach {
    it.options.release = 8
}

java {
    withSourcesJar()
}

version = "${property('mod.version')}+${property('deps.minecraft')}"
group = property('mod.group')

base {
    archivesName = property('mod.archive_name')
}

// add repos for all projects
repositories {
    maven { url 'https://maven.enjarai.dev/mirrors' }
    maven { url 'https://maven.enjarai.dev/releases' }

    maven {
        name "Terraformers Maven"
        url 'https://maven.terraformersmc.com'
    }
    maven {
        name "Shedaniel Maven"
        url "https://maven.shedaniel.me/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
}

processResources {
    inputs.property "version", version

    filesMatching("fabric.mod.json") {
        expand "version": version
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${property('deps.floader')}"
    minecraft "com.mojang:minecraft:${property('deps.minecraft')}"
    mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"

    modImplementation "com.terraformersmc:modmenu:${property('deps.modmenu')}"
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${property('deps.cloth_config')}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    include(api(project(path: ":shared-resources-api", configuration: "namedElements")) {
        // make sure to yeet one of the loaders
        exclude group: "net.fabricmc", module: "fabric-loader"
    })

    modImplementation("nl.enjarai:cicada-lib:${property("deps.cicada")}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    subprojects.forEach((project) -> {
        include(project) {
            transitive = false
        }
    })
}

if (stonecutter.current.isActive()) {
    rootProject.tasks.register("buildActive") {
        group = "project"

        dependsOn(tasks.named("build"))
    }
}

//publishing {
//    repositories {
//        maven {
//            name = "enjaraiMaven"
//            url = "https://maven.enjarai.dev/releases"
//            credentials(PasswordCredentials)
//            authentication {
//                basic(BasicAuthentication)
//            }
//        }
//    }
//
//    publications {
//        mavenJava(MavenPublication) {
//            groupId = property('mod.group')
//            artifactId = property('mod.archive_name')
//            version = project.version
//
//            from components.java
//        }
//    }
//}